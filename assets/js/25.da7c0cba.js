(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{607:function(t,v,_){"use strict";_.r(v);var e=_(17),l=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"容器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[t._v("#")]),t._v(" 容器")]),t._v(" "),_("ul",[_("li",[t._v("Collection\n"),_("ul",[_("li",[t._v("一个独立元素的序列")]),t._v(" "),_("li",[t._v("List必须按照插入的顺序保存元素")]),t._v(" "),_("li",[t._v("Set不能有重复元素")]),t._v(" "),_("li",[t._v("Queue按照"),_("code",[t._v("排队规则")]),t._v("来确定对象的顺序")])])]),t._v(" "),_("li",[t._v("Map\n"),_("ul",[_("li",[t._v('一组成对的"键值对"对象，允许你使用键来找值')])])])]),t._v(" "),_("h2",{attrs:{id:"迭代器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),_("p",[t._v("迭代器的工作是遍历并选择序列中的对象，而不需要关心该序列的继承结构。")]),t._v(" "),_("ul",[_("li",[t._v("任何实现"),_("code",[t._v("Iterable")]),t._v("接口的Collection对象都可以使用迭代器")]),t._v(" "),_("li",[t._v("任何实现"),_("code",[t._v("Iterable")]),t._v("接口的Collection对象都可以使用"),_("code",[t._v("forEach")])])]),t._v(" "),_("h2",{attrs:{id:"知识点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[t._v("#")]),t._v(" 知识点")]),t._v(" "),_("ul",[_("li",[t._v("RandomAccess是一个标志接口，实现了这个接口的集合是支持 "),_("strong",[t._v("快速随机访问")]),t._v(" 策略的")]),t._v(" "),_("li",[t._v("ArrayList实现了RandomAccess，支持快速随机访问，使用for循环的方式获取数据会优于用迭代器获取数据（JDK API描述）")]),t._v(" "),_("li",[t._v("✨通过Java泛型指定了容器中存放的对象类型，因此就可以在编译期防止将错误的类型对象防止到容器中，并且再从容器中获取元素时，也不必进行类型转换")]),t._v(" "),_("li",[_("code",[t._v("Collection<T>")]),t._v("其中尖括号括起来的是"),_("code",[t._v("类型参数")])])])])}),[],!1,null,null,null);v.default=l.exports}}]);