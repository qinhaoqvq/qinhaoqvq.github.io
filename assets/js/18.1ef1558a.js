(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{602:function(t,a,s){"use strict";s.r(a);var n=s(17),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("h3",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),s("h4",{attrs:{id:"基本类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[t._v("#")]),t._v(" 基本类型")]),t._v(" "),s("ol",[s("li",[t._v("String")]),t._v(" "),s("li",[t._v("Number")]),t._v(" "),s("li",[t._v("boolean")]),t._v(" "),s("li",[t._v("undefined")]),t._v(" "),s("li",[t._v("null")])]),t._v(" "),s("h5",{attrs:{id:"number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("Infinity")]),t._v("表示一个正无穷，"),s("code",[t._v("-Infinity")]),t._v("表示一个负无穷。它是一个字面量，typeof 返回 number")]),t._v(" "),s("li",[s("code",[t._v("NaN")]),t._v("，它是一个特殊的数字，表示 Not A Number。它是一个字面量，typeof 返回 number")])]),t._v(" "),s("h4",{attrs:{id:"对象类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象类型"}},[t._v("#")]),t._v(" 对象类型")]),t._v(" "),s("ol",[s("li",[t._v("Object：任意对象")]),t._v(" "),s("li",[t._v("Function：一种特别的对象，内部保存的可执行代码，可调用执行")]),t._v(" "),s("li",[t._v("Array：对象的集合")])]),t._v(" "),s("h4",{attrs:{id:"类型判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型判断"}},[t._v("#")]),t._v(" 类型判断")]),t._v(" "),s("ol",[s("li",[t._v("typeof")]),t._v(" "),s("li",[t._v("instanceof")]),t._v(" "),s("li",[t._v("===")])]),t._v(" "),s("h4",{attrs:{id:"undefined和null的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#undefined和null的区别"}},[t._v("#")]),t._v(" undefined和null的区别")]),t._v(" "),s("p",[t._v("undefined：定义了变量但未赋值")]),t._v(" "),s("p",[t._v("null：定义了变量并赋值了，赋值为null")]),t._v(" "),s("h3",{attrs:{id:"字面量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字面量"}},[t._v("#")]),t._v(" 字面量")]),t._v(" "),s("p",[s("strong",[t._v("理解为用来为变量赋值时的常数量")])]),t._v(" "),s("ol",[s("li",[t._v("数字字面量，"),s("code",[t._v("var obj = 1")])]),t._v(" "),s("li",[t._v("字符串字面量，"),s("code",[t._v("var obj = 'str'")])]),t._v(" "),s("li",[t._v("对象字面量，"),s("code",[t._v("var obj = {}")])])]),t._v(" "),s("h3",{attrs:{id:"伪数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#伪数组"}},[t._v("#")]),t._v(" 伪数组")]),t._v(" "),s("blockquote",[s("p",[t._v("伪数组，也称为类数组。长相很像数组，但是将他的原型"),s("code",[t._v("_proto_")]),t._v("类型是Object，数组的是Array，它没有数组的"),s("code",[t._v("splice")]),t._v("，"),s("code",[t._v("concat")]),t._v("，"),s("code",[t._v("pop")]),t._v("等方法")])]),t._v(" "),s("h4",{attrs:{id:"作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),s("p",[t._v("伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法")]),t._v(" "),s("h4",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("ol",[s("li",[t._v("具有"),s("code",[t._v("length")]),t._v("属性")]),t._v(" "),s("li",[t._v("按索引方式存储数组")]),t._v(" "),s("li",[t._v("不具有数组的方法，比如push()，pop()等")])]),t._v(" "),s("h4",{attrs:{id:"常见的伪数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的伪数组"}},[t._v("#")]),t._v(" 常见的伪数组")]),t._v(" "),s("ol",[s("li",[t._v("jQuery 对象（比如 $(“div”) ）")]),t._v(" "),s("li",[t._v("函数内部的 arguments")]),t._v(" "),s("li",[t._v("DOM 对象列表（document.childNodes返回的NodeList对象）")]),t._v(" "),s("li",[t._v("上传文件时选择的file对象也是伪数组")])]),t._v(" "),s("h4",{attrs:{id:"伪数组转为真正数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#伪数组转为真正数组"}},[t._v("#")]),t._v(" 伪数组转为真正数组")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("Array.prototype.slice.call(array)或[].slice.call()")]),t._v("，两者都一样，原理: 原型链")]),t._v(" "),s("li",[t._v("使用ES6的Array.from()")]),t._v(" "),s("li",[t._v("使用ES6的扩展操作符"),s("code",[t._v("let real = [...array]")])])]),t._v(" "),s("h4",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("ol",[s("li",[t._v("伪数组没有数组 "),s("code",[t._v("Array.prototype")]),t._v(" 的属性值，类型是 "),s("code",[t._v("Object")]),t._v(" ，而数组类型是 "),s("code",[t._v("Array")])]),t._v(" "),s("li",[t._v("数组是基于索引的实现， length 会自动更新，而对象是键值对")]),t._v(" "),s("li",[t._v("使用对象可以创建伪数组，伪数组可以利用"),s("code",[t._v("call")]),t._v("或者"),s("code",[t._v("apply")]),t._v("很方便的转化为真数组")])]),t._v(" "),s("h3",{attrs:{id:"变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[t._v("#")]),t._v(" 变量提升")]),t._v(" "),s("h3",{attrs:{id:"arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[t._v("#")]),t._v(" arguments")]),t._v(" "),s("p",[t._v("在函数调用时，解析器每次都会向函数传递两个"),s("strong",[t._v("隐含的参数（this 和 arguments）")]),t._v("。arguments 是封装"),s("strong",[t._v("实参")]),t._v("的对象，是一个类数组对象（类似数组的对象，但不是数组，Array.isArray(argumnets)\n== false ），即它可以通过索引来操作数据。通过"),s("code",[t._v("arguments.callee")]),t._v("方法可以获取到当前执行函数的对象")]),t._v(" "),s("h3",{attrs:{id:"创建对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建对象"}},[t._v("#")]),t._v(" 创建对象")]),t._v(" "),s("h4",{attrs:{id:"工厂方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法"}},[t._v("#")]),t._v(" 工厂方法")]),t._v(" "),s("p",[t._v("通过工厂方法创建的对象都是Object类型的")]),t._v(" "),s("h4",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("p",[s("strong",[t._v("构造函数的执行流程")])]),t._v(" "),s("ol",[s("li",[t._v("新建一个对象")]),t._v(" "),s("li",[t._v("将新建的对象设置为函数中的 this，在构造函数中可以使用 this 来引用的对象")]),t._v(" "),s("li",[t._v("顺序执行函数中的代码")]),t._v(" "),s("li",[t._v("返回新建对象")])]),t._v(" "),s("h4",{attrs:{id:"object-create-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-create-方法"}},[t._v("#")]),t._v(" Object.create() 方法")]),t._v(" "),s("p",[s("code",[t._v("var obj = Object.create(prototypeObj)")])]),t._v(" "),s("h2",{attrs:{id:"🍑函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🍑函数"}},[t._v("#")]),t._v(" 🍑函数")]),t._v(" "),s("blockquote",[s("p",[t._v("函数也是一个对象")])]),t._v(" "),s("h3",{attrs:{id:"创建函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建函数"}},[t._v("#")]),t._v(" 创建函数")]),t._v(" "),s("ol",[s("li",[t._v("通过"),s("strong",[t._v("构造函数")]),t._v("创建函数"),s("code",[t._v("var func = new Function()")])]),t._v(" "),s("li",[t._v("通过"),s("strong",[t._v("函数声明")]),t._v("创建函数"),s("code",[t._v("function func(){}")])]),t._v(" "),s("li",[t._v("通过"),s("strong",[t._v("函数表达式")]),t._v("创建函数"),s("code",[t._v("var func = function(){}")])]),t._v(" "),s("li",[s("code",[t._v("function(){}")]),t._v("是一个匿名函数")])]),t._v(" "),s("h3",{attrs:{id:"函数调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数调用"}},[t._v("#")]),t._v(" 函数调用")]),t._v(" "),s("p",[s("strong",[t._v("JavaScript 函数有 4 种调用方式，每种方式的不同在于 this 的初始化。")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("作为一个函数调用『函数作为全局对象调用，会使 "),s("strong",[t._v("this")]),t._v(" 的值成为全局对象，即 window』")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上函数不属于任何对象。但是在 JavaScript 中它始终是默认的全局对象, 即, window.func('abc')。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时 this 指向 window 对象")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("函数作为方法调用『函数作为对象方法调用，会使得 this 的值成为对象本身』")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'admin'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("say")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用函数")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("使用构造函数调用函数『函数作为构造方法调用，this 的值为通过调用函数实例化出的对象（new object）』")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'admin'")]),t._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("作为函数方法调用函数『 在调用函数时第一个参数会成为 "),s("strong",[t._v("this")]),t._v(" 的值， 即使该参数不是一个对象』")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. call()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 20")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. apply()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmyArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" myArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 20")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ** myObject 没有 MyFunction 方法，但是可以通过 call/apply 方式调用 **")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两个方法都使用了对象本身作为第一个参数。 两者的区别在于第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"回调函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回调函数"}},[t._v("#")]),t._v(" 回调函数")]),t._v(" "),s("ol",[s("li",[t._v("DOM事件回调函数")]),t._v(" "),s("li",[t._v("定时器回掉函数")]),t._v(" "),s("li",[t._v("AJAX请求回调函数")]),t._v(" "),s("li",[t._v("生命周期回调函数")])]),t._v(" "),s("h3",{attrs:{id:"立即执行函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#立即执行函数"}},[t._v("#")]),t._v(" 立即执行函数")]),t._v(" "),s("p",[t._v("调用函数语法："),s("code",[t._v("函数对象()")]),t._v("，立即执行函数就是通过创建一个"),s("strong",[t._v("匿名函数")]),t._v("，然后直接调用")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"箭头函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[t._v("#")]),t._v(" 箭头函数")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("参数"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 参数"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" …"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n参数"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    函数声明\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"🍿this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🍿this"}},[t._v("#")]),t._v(" 🍿this")]),t._v(" "),s("p",[t._v("解析器在每次调用函数时都会向函数内部传递一个隐式参数，即"),s("strong",[t._v("this")]),t._v("，this 指向一个对象，这个对象我们称为函数执行的"),s("strong",[t._v("上下文对象")]),t._v("。根据调用方式不同，this会指向不同的对象。")]),t._v(" "),s("h2",{attrs:{id:"🥛原型与原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🥛原型与原型链"}},[t._v("#")]),t._v(" 🥛原型与原型链")]),t._v(" "),s("blockquote",[s("ol",[s("li",[t._v("所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法（"),s("strong",[t._v("prototype")]),t._v("）")]),t._v(" "),s("li",[t._v("JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。一般情况，Object 为最顶端原型对象")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://qiniu.promisingyoung.cn/202204170000665.png",alt:""}})]),t._v(" "),s("ol",[s("li",[t._v("每创建一个函数，解析器都会向函数中添加一个"),s("code",[t._v("prototype")]),t._v("属性。每一个函数都有一个属于自己的原型对象")]),t._v(" "),s("li",[t._v("通过构造函数创建对象时，该对象中都会有一个隐式的"),s("code",[t._v("__proto__")]),t._v("属性，该属性与创建对象的"),s("code",[t._v("函数对象的prototype属性")]),t._v("相同")]),t._v(" "),s("li",[t._v("使用 in 检查对象中是否含有某个属性时，如果对象中没有该属性但是原型对象中有，则返回 true")]),t._v(" "),s("li",[t._v("使用 hasOwnProperty（）方法可以检查对象本身是否含有某个属性")])]),t._v(" "),s("h3",{attrs:{id:"作用-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用-2"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),s("p",[t._v("创建构造函数时，可以将公共的属性和方法定义到原型对象中。这样可以不需要在每个对象中重复创建，并且也不会影响到全局作用域")]),t._v(" "),s("h3",{attrs:{id:"显示原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显示原型"}},[t._v("#")]),t._v(" 显示原型")]),t._v(" "),s("blockquote",[s("p",[t._v("每个函数 function 都有一个 prototype 属性，即，显示原型。")]),t._v(" "),s("p",[t._v("在定义函数式自动添加，默认值为空 Object 对象")])]),t._v(" "),s("h3",{attrs:{id:"隐式原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式原型"}},[t._v("#")]),t._v(" 隐式原型")]),t._v(" "),s("blockquote",[s("p",[t._v("每个实例对象都有一个 __proto__ 属性，即，隐式原型。")]),t._v(" "),s("p",[t._v("在创建对象时自动添加，默认值为构造函数的 prototype 属性")])]),t._v(" "),s("h2",{attrs:{id:"🌈闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🌈闭包"}},[t._v("#")]),t._v(" 🌈闭包")]),t._v(" "),s("h3",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("闭包是有权访问另外一个函数中的局部变量的函数。")]),t._v(" "),s("p",[t._v("通常可以理解为，在一个函数中能够访问另外一个函数中的局部变量")]),t._v(" "),s("h3",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("p",[t._v("闭包的实现原理，其实是利用了作用域链的特性，我们都知道作用域链就是在当前执行环境下访问某个变量时，如果不存在就一直向外层寻找，最终寻找到最外层也就是全局作用域，这样就形成了一个链条。")]),t._v(" "),s("h3",{attrs:{id:"作用-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用-3"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),s("p",[t._v("**作用1：**隐藏变量，避免全局污染")]),t._v(" "),s("p",[t._v("**作用2：**可以读取函数内部的变量，延长了变量的作用范围")]),t._v(" "),s("p",[t._v("**缺点1：**导致变量不会被垃圾回收机制回收，造成内存消耗")]),t._v(" "),s("p",[t._v("**缺点2：**不恰当的使用闭包可能会造成内存泄漏的问题")]),t._v(" "),s("h3",{attrs:{id:"常见场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见场景"}},[t._v("#")]),t._v(" 常见场景")]),t._v(" "),s("ol",[s("li",[t._v("for 循环创建异步任务并且使用到遍历变量 i 时")]),t._v(" "),s("li",[t._v("闭包返回一个 function，并且在该函数中使用了 this，此时 this 指向的相当于是创建该 function 的上下文对象")])])])}),[],!1,null,null,null);a.default=r.exports}}]);