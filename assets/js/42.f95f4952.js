(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{623:function(t,r,a){"use strict";a.r(r);var e=a(17),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("记录了前后端分离的开发模式的学习笔记，参考了优秀开源项目"),a("code",[t._v("RuoYi-Vue")]),t._v("，其中部分代码根据理解自己进行了改造和优化。此文档主要用于记录个人学习笔记，并不适用于参考学习")]),t._v(" "),a("h2",{attrs:{id:"common模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common模块"}},[t._v("#")]),t._v(" common模块")]),t._v(" "),a("h3",{attrs:{id:"initbinder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initbinder"}},[t._v("#")]),t._v(" @InitBinder")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("@InitBinder")]),t._v("自定义类型转换，可以将前台传递的参数自动转换成想要的数据类型，如，时间字符串转成"),a("code",[t._v("Date")]),t._v("类型。通常定义在"),a("code",[t._v("BaseController")])]),t._v(" "),a("h3",{attrs:{id:"servletutils"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#servletutils"}},[t._v("#")]),t._v(" ServletUtils")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("RequestContextHolder")]),t._v("获取"),a("code",[t._v("RequestAttributes")]),t._v("，然后可以获取当前请求的相关信息"),a("code",[t._v("HttpServletRequest / HttpServletResponse / HttpSession")])]),t._v(" "),a("h3",{attrs:{id:"类型转换器convert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换器convert"}},[t._v("#")]),t._v(" 类型转换器Convert")]),t._v(" "),a("p",[t._v("类型之间进行相互转换，需要统一维护（包括方法重载，数据校验等），参考 "),a("code",[t._v("HuTool#Convert")])]),t._v(" "),a("h3",{attrs:{id:"basecontroller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basecontroller"}},[t._v("#")]),t._v(" BaseController")]),t._v(" "),a("ol",[a("li",[t._v("通过"),a("code",[t._v("this.getClass()")]),t._v("定义 Logger 对象")]),t._v(" "),a("li",[t._v("定义获取用户相关信息的公共方法")])]),t._v(" "),a("h3",{attrs:{id:"springutil"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springutil"}},[t._v("#")]),t._v(" SpringUtil")]),t._v(" "),a("p",[t._v("通过实现 Spring 的"),a("code",[t._v("Aware")]),t._v("接口获取 Spring 容器中的信息，如"),a("code",[t._v("BeanFactoryPostProcessor")]),t._v("或"),a("code",[t._v("ApplicationContextAware")]),t._v("。可以参考"),a("code",[t._v("cn.hutool.extra.spring.SpringUtil")]),t._v("使用该工具类前需要先添加扫包，注册该bean")]),t._v(" "),a("h2",{attrs:{id:"framework模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#framework模块"}},[t._v("#")]),t._v(" framework模块")]),t._v(" "),a("h3",{attrs:{id:"数据源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据源"}},[t._v("#")]),t._v(" 数据源")]),t._v(" "),a("h3",{attrs:{id:"aspect切面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aspect切面"}},[t._v("#")]),t._v(" Aspect切面")]),t._v(" "),a("h4",{attrs:{id:"pointcut"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pointcut"}},[t._v("#")]),t._v(" pointCut")]),t._v(" "),a("ol",[a("li",[t._v("execution："),a("strong",[t._v("Spring")]),t._v(" 中主要的切点指示符是 "),a("strong",[t._v("execution")]),t._v("，它匹配方法执行连接点")]),t._v(" "),a("li",[t._v("within：使用 "),a("strong",[t._v("within")]),t._v(" 切点指示符，它将匹配限制为某些类型的连接点")]),t._v(" "),a("li",[t._v("this 和 target："),a("strong",[t._v("this")]),t._v(" 将匹配限制为 "),a("strong",[t._v("bean")]),t._v(" 引用是给定类型的实例的连接点，而 "),a("strong",[t._v("target")]),t._v(" 将匹配限制为目标对象是给定类型的实例的连接点。前者在 "),a("strong",[t._v("Spring AOP")]),t._v(" 创建基于 "),a("strong",[t._v("CGLIB")]),t._v(" 的代理时工作，后者在创建基于 "),a("strong",[t._v("JDK")]),t._v(" 的代理时使用")]),t._v(" "),a("li",[t._v("@annotation：该切点指示符将匹配限制为连接点的主题具有给定注解的连接点")]),t._v(" "),a("li",[t._v("@within：该切点指示符将匹配限制为具有给定注解的类型中的连接点")])]),t._v(" "),a("h4",{attrs:{id:"annotationutils"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#annotationutils"}},[t._v("#")]),t._v(" AnnotationUtils")]),t._v(" "),a("p",[t._v("Spring 提供处理的 annotation 工具类")]),t._v(" "),a("h3",{attrs:{id:"ldap用户存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ldap用户存储"}},[t._v("#")]),t._v(" LDAP用户存储")])])}),[],!1,null,null,null);r.default=s.exports}}]);