(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{618:function(t,a,s){"use strict";s.r(a);var n=s(17),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"线程概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程概念"}},[t._v("#")]),t._v(" 线程概念")]),t._v(" "),s("p",[t._v("并发发编程使我们可以将程序划分为多个分离的、独立运行的任务。通过使用多线程机制，这些独立的任务中的每一个都将由"),s("code",[t._v("执行线程")]),t._v("来驱动。即，"),s("strong",[t._v("线程可以驱动任务")])]),t._v(" "),s("h3",{attrs:{id:"创建线程的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建线程的方式"}},[t._v("#")]),t._v(" 创建线程的方式")]),t._v(" "),s("ol",[s("li",[t._v("实现Runnable接口，重写run()方法")]),t._v(" "),s("li",[t._v("继承Thread类，重写run()方法")]),t._v(" "),s("li",[t._v("实现Callable接口，重写call()方法")]),t._v(" "),s("li",[t._v("使用线程池（底层是ThreadFactory）")])]),t._v(" "),s("h3",{attrs:{id:"线程状态✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程状态✨"}},[t._v("#")]),t._v(" 线程状态✨")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://qiniu.promisingyoung.cn/202204011939717.jpeg",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"thread-state-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#thread-state-api"}},[t._v("#")]),t._v(" Thread.State API")]),t._v(" "),s("ol",[s("li",[t._v("NEW（新建）")]),t._v(" "),s("li",[t._v("RUNNABLE（可运行）")]),t._v(" "),s("li",[t._v("BLOCKED（被阻塞）")]),t._v(" "),s("li",[t._v("WAITTING（等待）")]),t._v(" "),s("li",[t._v("TIMED_WAITTING（超时等待）")]),t._v(" "),s("li",[t._v("TERMINATED（终止）")])]),t._v(" "),s("h5",{attrs:{id:"new新建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new新建"}},[t._v("#")]),t._v(" New新建")]),t._v(" "),s("p",[t._v("创建一个Thread对象，但还未调用start()启动线程时，线程处于初始态")]),t._v(" "),s("h5",{attrs:{id:"runnable可运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runnable可运行"}},[t._v("#")]),t._v(" Runnable可运行")]),t._v(" "),s("p",[t._v("在Java中，可运行态包括：Ready 和 Running")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Ready就绪态")]),t._v(" "),s("ul",[s("li",[t._v("该状态下的线程已经获得执行所需的所有资源，CPU只要分配执行权就能运行")]),t._v(" "),s("li",[t._v("所有就绪态的线程存放在就绪队列中")])])]),t._v(" "),s("li",[s("strong",[t._v("Running运行中")]),t._v(" "),s("ul",[s("li",[t._v("已获得CPU执行权，正在被CPU执行的线程")]),t._v(" "),s("li",[t._v("由于一个CPU同一时刻只能执行一条线程，因此每个CPU每个时刻只有一条运行态的线程")]),t._v(" "),s("li",[t._v("可以通过yield放弃CPU执行（例如在非抢占式操作系统中，需要由正在执行的线程主动放弃CPU）")])])])]),t._v(" "),s("h5",{attrs:{id:"blocked被阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#blocked被阻塞"}},[t._v("#")]),t._v(" Blocked被阻塞")]),t._v(" "),s("p",[t._v("当一条正在执行的线程请求某一资源失败时，就会进入阻塞态")]),t._v(" "),s("ul",[s("li",[t._v("在Java中，阻塞态常指请求锁失败时而被迫进入的状态（锁、IO、Socket等资源。这里仅涉及锁）")]),t._v(" "),s("li",[t._v("由一个阻塞队列存放所有阻塞态的线程")]),t._v(" "),s("li",[t._v("处于阻塞态的线程会不断请求资源，一旦请求成功，就会进入"),s("strong",[t._v("Runnable-Ready就绪态")]),t._v("，等待执行")])]),t._v(" "),s("h5",{attrs:{id:"waiting等待"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#waiting等待"}},[t._v("#")]),t._v(" Waiting等待")]),t._v(" "),s("ul",[s("li",[t._v("当前线程中调用wait、join、park函数时，当前线程就会进入等待态")]),t._v(" "),s("li",[t._v("由一个等待队列存放所有等待态的线程")]),t._v(" "),s("li",[t._v("线程处于等待态表示它需要等待其他线程的指示才能继续运行，需要由其他线程唤醒")]),t._v(" "),s("li",[t._v("进入等待态的线程会释放CPU执行权，并释放资源（如：锁）")])]),t._v(" "),s("h5",{attrs:{id:"timed-wating超时等待"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#timed-wating超时等待"}},[t._v("#")]),t._v(" Timed wating超时等待")]),t._v(" "),s("ul",[s("li",[t._v("当运行中的线程调用sleep(long)、wait(long)、join、parkNanos、parkUntil时，就会进入该状态")]),t._v(" "),s("li",[t._v("它和等待态一样，并不是因为请求不到资源，而是主动进入")]),t._v(" "),s("li",[t._v("进入该状态后释放CPU执行权 和 占有的资源")]),t._v(" "),s("li",[t._v("与"),s("code",[t._v("Waiting等待")]),t._v("的区别：到了设定时间后可自动进入"),s("code",[t._v("Runnable-Ready就绪态")])])]),t._v(" "),s("h5",{attrs:{id:"terminated终止"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#terminated终止"}},[t._v("#")]),t._v(" Terminated终止")]),t._v(" "),s("p",[t._v("包括运行结束自然终止，或者没有捕获异常而终止")]),t._v(" "),s("h4",{attrs:{id:"简化线程状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简化线程状态"}},[t._v("#")]),t._v(" 简化线程状态")]),t._v(" "),s("ol",[s("li",[t._v("新建：完成Thread对象创建，"),s("code",[t._v("已经可以获取CPU资源")])]),t._v(" "),s("li",[t._v("就绪：在该状态下，只要调度器把CPU资源分配给线程，线程就能立即运行")]),t._v(" "),s("li",[t._v("阻塞：线程能够运行，但是某个条件阻止它的运行。当线程处于阻塞状态是，调度器将忽略线程，"),s("code",[t._v("不会分配给线程任何CPU资源")]),t._v("。直到线程重新进入了就绪状态，它才有可能被执行")]),t._v(" "),s("li",[t._v("终止：线程已结束或者不再可运行。"),s("code",[t._v("调度器不会分配CPU资源")])])]),t._v(" "),s("h3",{attrs:{id:"线程常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程常用方法"}},[t._v("#")]),t._v(" 线程常用方法")]),t._v(" "),s("h4",{attrs:{id:"start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#start"}},[t._v("#")]),t._v(" start()")]),t._v(" "),s("p",[t._v("使该线程开始执行；Java 虚拟机调用该线程的 run 方法")]),t._v(" "),s("h4",{attrs:{id:"run"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[t._v("#")]),t._v(" run()")]),t._v(" "),s("p",[t._v("如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回")]),t._v(" "),s("h4",{attrs:{id:"setname"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setname"}},[t._v("#")]),t._v(" setName()")]),t._v(" "),s("p",[t._v("设置线程名称")]),t._v(" "),s("h4",{attrs:{id:"setpriority"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setpriority"}},[t._v("#")]),t._v(" setPriority()")]),t._v(" "),s("p",[t._v("更改线程的优先级。设置优先级只是很大程度上让某个线程尽可能获得比较多的执行机会，也就是让线程自己尽可能被操作系统调度，而不是设置了高优先级就一定优先运行")]),t._v(" "),s("h4",{attrs:{id:"setdaemon"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setdaemon"}},[t._v("#")]),t._v(" setDaemon()")]),t._v(" "),s("p",[t._v("将该线程标记为守护线程或用户线程")]),t._v(" "),s("h4",{attrs:{id:"sleep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sleep"}},[t._v("#")]),t._v(" sleep()")]),t._v(" "),s("p",[t._v("在指定的毫秒数内让当前正在执行的线程休眠（不会释放锁资源），线程进入"),s("code",[t._v("超时等待状态")])]),t._v(" "),s("h4",{attrs:{id:"join-✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join-✨"}},[t._v("#")]),t._v(" join()✨")]),t._v(" "),s("p",[t._v("等待调用该方法的线程执行完毕之后，再执行其他线程。join会进入"),s("strong",[t._v("Waiting等待状态")]),t._v("，所以它会释放锁资源")]),t._v(" "),s("h4",{attrs:{id:"yield-✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yield-✨"}},[t._v("#")]),t._v(" yield()✨")]),t._v(" "),s("p",[t._v("当线程调用yield方法后，线程即从"),s("strong",[t._v("Runnable-Running运行中")]),t._v("变为"),s("strong",[t._v("Runnable-Ready就绪态")]),t._v("\n，将CPU的执行权让给其他的线程，让出CPU执行权之后，其他的线程共同争夺CPU的执行权。（可能释放了CPU执行权之后该线程又抢到了，所以从运行结果上很难看出是否yield方法起了作用）")]),t._v(" "),s("h4",{attrs:{id:"interrupt-✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-✨"}},[t._v("#")]),t._v(" interrupt()✨")]),t._v(" "),s("p",[t._v("中断线程，将线程的状态置为中断（true），不影响线程的正常执行。当interrupt碰到了sleep、wait、join时会抛出"),s("code",[t._v("InterruptedException")]),t._v("\n异常，并将中断状态清除（中断状态为false）。但是，不能中断正在尝试获取"),s("code",[t._v("synchronize锁")]),t._v("或者尝试执行"),s("code",[t._v("I/O操作")]),t._v("的线程")]),t._v(" "),s("h5",{attrs:{id:"代码验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码验证"}},[t._v("#")]),t._v(" 代码验证")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProducerConsumer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"获取了锁资源"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟耗时操作")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProducerConsumer")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProducerConsumer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MILLISECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 测试需要,保证线程1获取到锁资源")]),t._v("\n        t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("interrupt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"isinterrupted-和interrupted"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isinterrupted-和interrupted"}},[t._v("#")]),t._v(" isInterrupted()和interrupted()")]),t._v(" "),s("p",[t._v("测试线程是否已经中断")]),t._v(" "),s("h4",{attrs:{id:"isalive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isalive"}},[t._v("#")]),t._v(" isAlive()")]),t._v(" "),s("p",[t._v("测试线程是否处于活动状态")]),t._v(" "),s("h4",{attrs:{id:"几个方法的比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#几个方法的比较"}},[t._v("#")]),t._v(" 几个方法的比较")]),t._v(" "),s("ol",[s("li",[t._v("Thread.sleep(long millis)，一定是当前线程调用此方法，当前线程进入TIMED_WAITING状态，"),s("code",[t._v("但不释放对象锁")]),t._v("，millis后线程自动苏醒进入就绪状态。作用：给其它线程执行机会的最佳方式。")]),t._v(" "),s("li",[t._v("Thread.yield()，一定是当前线程调用此方法，当前线程放弃获取的CPU时间片，"),s("code",[t._v("但不释放锁资源")]),t._v("\n，由运行状态变为就绪状态，让OS再次选择线程。作用：让相同优先级的线程轮流执行，但并不保证一定会轮流执行。实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。Thread.yield()\n不会导致阻塞。该方法与sleep()类似，只是不能由用户指定暂停多长时间。")]),t._v(" "),s("li",[t._v("t.join()/t.join(long millis)，当前线程里调用其它线程t的join方法，当前线程进入WAITING/TIMED_WAITING状态，当前线程"),s("code",[t._v("不会释放已经持有的对象锁")]),t._v("\n。线程t执行完毕或者millis时间到，当前线程进入就绪状态。")]),t._v(" "),s("li",[t._v("obj.wait()，当前线程调用对象的wait()方法，当前线程"),s("code",[t._v("释放对象锁")]),t._v("，进入等待队列。依靠notify()/notifyAll()唤醒或者wait(long timeout) timeout时间到自动唤醒。")]),t._v(" "),s("li",[t._v("obj.notify()唤醒在此对象监视器上等待的单个线程，选择是任意性的。notifyAll()唤醒在此对象监视器上等待的所有线程。")])]),t._v(" "),s("h2",{attrs:{id:"线程捕获异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程捕获异常"}},[t._v("#")]),t._v(" 线程捕获异常")]),t._v(" "),s("h2",{attrs:{id:"线程本地存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程本地存储"}},[t._v("#")]),t._v(" 线程本地存储")]),t._v(" "),s("p",[s("code",[t._v("ThreadLocal<T>")])]),t._v(" "),s("h2",{attrs:{id:"wait-和notifyall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wait-和notifyall"}},[t._v("#")]),t._v(" wait()和notifyAll()")]),t._v(" "),s("h3",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("h3",{attrs:{id:"注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),s("ol",[s("li",[t._v("只能在同步代码块或同步方法中调用"),s("code",[t._v("wait()、notify()和notifyAll()")]),t._v("，但是，如果在非同步方法中使用以上方法，编译能通过，但是运行时会报"),s("code",[t._v("IllegalMonitorStateException")]),t._v("\n异常，即，线程在调用这些方法前"),s("strong",[t._v("必须拥有对象的锁")])]),t._v(" "),s("li",[t._v("✨出现虚假唤醒的原因是"),s("code",[t._v("从阻塞态")]),t._v("到"),s("code",[t._v("就绪态")]),t._v("再到"),s("code",[t._v("运行态")]),t._v("没有"),s("code",[t._v("再")]),t._v("进行判断。IF不会重新判断，必须使用"),s("code",[t._v("while")]),t._v("条件判断")])]),t._v(" "),s("h3",{attrs:{id:"生产者和消费者模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生产者和消费者模型"}},[t._v("#")]),t._v(" 生产者和消费者模型")]),t._v(" "),s("h3",{attrs:{id:"lock和condition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lock和condition"}},[t._v("#")]),t._v(" Lock和Condition")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("Lock->synchronize")])]),t._v(" "),s("li",[s("code",[t._v("Condition.await()->Object.wait()")])]),t._v(" "),s("li",[s("code",[t._v("Condition.signal()/signalAll()->Object.notify()/notifyAll()")])])]),t._v(" "),s("h2",{attrs:{id:"死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[t._v("#")]),t._v(" 死锁")]),t._v(" "),s("h3",{attrs:{id:"产生条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#产生条件"}},[t._v("#")]),t._v(" 产生条件")]),t._v(" "),s("ol",[s("li",[t._v("互斥条件：一个资源每次只能被一个进程使用")]),t._v(" "),s("li",[t._v("请求与保持条件：一个进程因请求资源而阻塞时，并且对已获得的资源保持不放")]),t._v(" "),s("li",[t._v("不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺")]),t._v(" "),s("li",[t._v("循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系")])]),t._v(" "),s("h2",{attrs:{id:"juc中的组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#juc中的组件"}},[t._v("#")]),t._v(" JUC中的组件")]),t._v(" "),s("h3",{attrs:{id:"countdownlatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch"}},[t._v("#")]),t._v(" CountDownLatch")]),t._v(" "),s("h3",{attrs:{id:"cyclicbarrier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier"}},[t._v("#")]),t._v(" CyclicBarrier")]),t._v(" "),s("h3",{attrs:{id:"semaphore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#semaphore"}},[t._v("#")]),t._v(" Semaphore")]),t._v(" "),s("h3",{attrs:{id:"exchanger"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exchanger"}},[t._v("#")]),t._v(" Exchanger")]),t._v(" "),s("h3",{attrs:{id:"delayqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delayqueue"}},[t._v("#")]),t._v(" DelayQueue")]),t._v(" "),s("h3",{attrs:{id:"priorityblockingqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#priorityblockingqueue"}},[t._v("#")]),t._v(" PriorityBlockingQueue")]),t._v(" "),s("h3",{attrs:{id:"scheduledexecutor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduledexecutor"}},[t._v("#")]),t._v(" ScheduledExecutor")]),t._v(" "),s("h3",{attrs:{id:"免锁容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#免锁容器"}},[t._v("#")]),t._v(" 免锁容器")]),t._v(" "),s("ol",[s("li",[t._v("CopyOnWriteArrayList")]),t._v(" "),s("li",[t._v("CopyOnWriteArraySet")]),t._v(" "),s("li",[t._v("ConcurrentHashMap")]),t._v(" "),s("li",[t._v("ConcurrentLinkedQueue")])]),t._v(" "),s("h3",{attrs:{id:"乐观加锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乐观加锁"}},[t._v("#")]),t._v(" 乐观加锁")]),t._v(" "),s("ol",[s("li",[t._v("Atomic原子操作类")]),t._v(" "),s("li",[t._v("ReadWriteLock")])])])}),[],!1,null,null,null);a.default=e.exports}}]);