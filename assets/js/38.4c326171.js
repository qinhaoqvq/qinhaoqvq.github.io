(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{625:function(t,s,a){"use strict";a.r(s);var n=a(17),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("复用类，说白了就是重复使用类，此方法的窍门在于使用类而不破坏现有程序代码。在Java中复用的三种常用方式是：组合、继承和代理")]),t._v(" "),a("h2",{attrs:{id:"组合、继承和代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合、继承和代理"}},[t._v("#")]),t._v(" 组合、继承和代理")]),t._v(" "),a("h3",{attrs:{id:"组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合"}},[t._v("#")]),t._v(" 组合")]),t._v(" "),a("p",[t._v("我们可以在一个新类的定义中引用其他对象，这就是组合")]),t._v(" "),a("ul",[a("li",[t._v("使用基本数据类型时会被初始化成二进制的零")]),t._v(" "),a("li",[t._v("使用引用数据类型时会被初始化为null")])]),t._v(" "),a("h3",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("extends")]),t._v("关键在基类的基础上创建新类，这就是继承")]),t._v(" "),a("ul",[a("li",[t._v("继承能够访问基类中"),a("code",[t._v("非private")]),t._v("的变量和方法（如果基类与新类不在同一包下，那也不能访问"),a("code",[t._v("default")]),t._v("的变量和方法）")]),t._v(" "),a("li",[t._v("初始化基类\n"),a("ul",[a("li",[t._v("当创建了一个子类的对象时，该对象也包含了一个基类的子对象")]),t._v(" "),a("li",[t._v("在构造方法中调用基类的构造方法来执行初始化")])])]),t._v(" "),a("li",[t._v("super能够显示的调用基类的构造方法")]),t._v(" "),a("li",[t._v("✨只有非private方法才能被覆盖")])]),t._v(" "),a("h3",{attrs:{id:"代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理")]),t._v(" "),a("p",[t._v("我们将一个成员对象置于所要创建的新类中（就像组合），但与此同时我们在新类中暴露了该成员对象的所有方法（就像继承），这就是代理")]),t._v(" "),a("h3",{attrs:{id:"组合和继承对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合和继承对比"}},[t._v("#")]),t._v(" 组合和继承对比")]),t._v(" "),a("ul",[a("li",[t._v("组合和继承都是允许在新的类中放置子对象，组合是"),a("code",[t._v("显式")]),t._v("地这样做，而继承则是"),a("code",[t._v("隐式")]),t._v("地这样做")]),t._v(" "),a("li",[t._v("组合可以将引用对象隐藏起来，在外部看来是在使用新类定义的接口，在内部其实所有功能都由引用对象实现")]),t._v(" "),a("li",[t._v("组合可以将引用对象暴露出来，允许用户直接访问")]),t._v(" "),a("li",[t._v("✨该用组合还是继承？判断是否需要从新类向基类进行"),a("code",[t._v("向上转型")]),t._v("，如果必须向上转型，则继承是必要的")])]),t._v(" "),a("h2",{attrs:{id:"✨类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✨类型转换"}},[t._v("#")]),t._v(" ✨类型转换")]),t._v(" "),a("h3",{attrs:{id:"宽转型、窄转型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宽转型、窄转型"}},[t._v("#")]),t._v(" 宽转型、窄转型")]),t._v(" "),a("p",[t._v("宽转型和窄转型是针对基本数据类型而言的，窄转型是不安全的要进行强制类型转换，可能发生精度丢失问题")]),t._v(" "),a("h3",{attrs:{id:"向上转型、向下转型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向上转型、向下转型"}},[t._v("#")]),t._v(" 向上转型、向下转型")]),t._v(" "),a("p",[t._v("向上转型和向下转型是针对对象而言的，它是"),a("code",[t._v("专用类型")]),t._v("和"),a("code",[t._v("通用类型")]),t._v("之间的相互转换。")]),t._v(" "),a("blockquote",[a("p",[t._v("该术语的使用是有其历史原因的，并且是以类继承图的绘制方法为基础的。")])]),t._v(" "),a("ul",[a("li",[t._v("向上转型 AKA 自动转换\n"),a("ul",[a("li",[t._v("向上转型是安全的，因为基类不会具有超出子类接口的范围")]),t._v(" "),a("li",[t._v("向上转型会丢失具体的类型信息（算是缺点）")]),t._v(" "),a("li",[t._v("✨基类引用指向子类对象由于向上转型了，它只能访问基类中拥有的方法和属性，而对于子类中存在而基类中不存在的方法，该引用是不能使用的，尽管是重载该方法（算是缺点）")]),t._v(" "),a("li",[t._v("✨若子类重写了基类类中的某些方法，在调用该些方法的时候，必定是使用子类中定义的这些方法（被称后期绑定或者动态绑定）")])])]),t._v(" "),a("li",[t._v("向下转型 AKA 强制转换\n"),a("ul",[a("li",[t._v("向下转型是不安全的，不正确的向下转型会抛出"),a("code",[t._v("ClassCastException")])])])]),t._v(" "),a("li",[t._v("运行时类型识别（RTTI）\n"),a("ul",[a("li",[t._v("在运行期间对类型进行检查的行为就被称作RTTI")])])])]),t._v(" "),a("h4",{attrs:{id:"代码验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码验证"}},[t._v("#")]),t._v(" 代码验证")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Instrument")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("play")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Instrument#play()方法被调用"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("overload")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Instrument#overload()方法被调用"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("override")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Instrument#override()方法被调用"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wind")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Instrument")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建指向子类的父类引用, 即, 向上转型")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Instrument")]),t._v(" instrument "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 子类覆盖了父类中的方法, 在实际执行方法时, 调用的是子类的方法")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果: Wind#override()方法被调用")]),t._v("\n        instrument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("override")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. Error, 指向子类的父类引用, 不能访问父类中不存在的方法, 即使是重载方法")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// instrument.overload(1);")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("overload")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Wind#overload()方法被调用"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("override")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Wind#override()方法被调用"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"final关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#final关键字"}},[t._v("#")]),t._v(" final关键字")]),t._v(" "),a("h3",{attrs:{id:"final数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#final数据"}},[t._v("#")]),t._v(" final数据")]),t._v(" "),a("ul",[a("li",[t._v("final基本数据类型，"),a("code",[t._v("数值")]),t._v("恒定不变")]),t._v(" "),a("li",[t._v("final引用数据类型，"),a("code",[t._v("引用")]),t._v("恒定不变")]),t._v(" "),a("li",[t._v("必须在域的定义处或者每个构造方法中对final变量进行赋值")])]),t._v(" "),a("h3",{attrs:{id:"final方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#final方法"}},[t._v("#")]),t._v(" final方法")]),t._v(" "),a("blockquote",[a("p",[t._v("✨混淆问题：")]),t._v(" "),a("p",[t._v("假如，在基类中声明一个private hello()的方法，在子类中试图定义一个同名的hello方法来覆盖，编译器也不会有错误信息。但其实是无效的，因为"),a("code",[t._v("覆盖")]),t._v(" 只有在某方法是基类的接口的一部分时才会出现。即，必须能够将一个对象向上转型为它的基本类型并调用相同的方法。如果某方法为private，那么它就不是基类的接口的一部分。")])]),t._v(" "),a("ul",[a("li",[t._v("final方法可以把方法锁定，防止任何继承类修改")]),t._v(" "),a("li",[t._v("编译器会将final方法都转为内嵌调用，消除方法调用的开销。现在已经过时，虚拟机会自动优化")]),t._v(" "),a("li",[t._v("类中所有的private方法都隐式的指定为是final的，因为private方法无法使用，所以也就无法覆盖它")])]),t._v(" "),a("h3",{attrs:{id:"final类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#final类"}},[t._v("#")]),t._v(" final类")]),t._v(" "),a("p",[t._v("当将某个类的整体定义为final时，那么该类将无法被继承")])])}),[],!1,null,null,null);s.default=e.exports}}]);