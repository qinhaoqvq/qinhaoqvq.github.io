(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{610:function(s,t,a){"use strict";a.r(t);var n=a(17),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("h3",{attrs:{id:"静态类型语言和动态类型语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态类型语言和动态类型语言"}},[s._v("#")]),s._v(" 静态类型语言和动态类型语言")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("静态类型语言：在编译期进行类型检查的语言，如Java、C++")]),s._v(" "),a("ul",[a("li",[s._v("变量的数据类型在编译期声明以后，不能再改变其数据类型，即变量在使用前必须先声明类型。类型检查在编译期进行，好处是编译期提前检查可能出现的错误")])])]),s._v(" "),a("li",[a("p",[s._v("动态类型语言：在运行期进行类型检查的语言，如JavaScript、Python")]),s._v(" "),a("ul",[a("li",[s._v("在运行期检查变量类型的语言，也就是在编写代码的时候可以不指定变量的数据类型，例如var num=1。动态类型语言中，变量没有类型，而值有类型")])])])]),s._v(" "),a("h3",{attrs:{id:"类型检查和类型转换的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型检查和类型转换的区别"}},[s._v("#")]),s._v(" 类型检查和类型转换的区别")]),s._v(" "),a("ul",[a("li",[s._v("类型检查：发生在编译期，检查方法是不是接收到了合适类型的参数，赋值是不是有合适的右值")]),s._v(" "),a("li",[s._v("类型转换正确性检查：发生在运行期，检查一个类型转换到另外一个类型是不是正确合法，如果执行了一个错误的类型转换，就会抛出一个"),a("code",[s._v("ClassCastException")]),s._v("异常")])]),s._v(" "),a("h3",{attrs:{id:"java语言性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java语言性质"}},[s._v("#")]),s._v(" Java语言性质")]),s._v(" "),a("ul",[a("li",[s._v("Java是静态类型语言，因为其在编译期接受静态的类型检查")]),s._v(" "),a("li",[s._v("Java是动态类型安全的语言，因为其运行期进行类型转换正确性检查")])]),s._v(" "),a("h3",{attrs:{id:"rtti和反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rtti和反射"}},[s._v("#")]),s._v(" RTTI和反射")]),s._v(" "),a("p",[a("strong",[s._v("✨运行时类型信息使得你可以在程序运行时发现和使用类型信息。在Java中运行时识别对象和类的信息的方式有两种："),a("code",[s._v("传统的RTTI")]),s._v("和"),a("code",[s._v("反射")])])]),s._v(" "),a("h2",{attrs:{id:"传统rtti"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统rtti"}},[s._v("#")]),s._v(" 传统RTTI")]),s._v(" "),a("h3",{attrs:{id:"是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[s._v("#")]),s._v(" 是什么")]),s._v(" "),a("p",[s._v("RTTI（Runtime Type Identification）运行阶段类型识别，含义就是在运行时，识别一个对象的类型。他使得从只能从编译期执行面向对象类型的操作的禁锢中解脱出来，并且可以使用某些非常强大的程序")]),s._v(" "),a("h3",{attrs:{id:"java执行rtti方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java执行rtti方式"}},[s._v("#")]),s._v(" Java执行RTTI方式")]),s._v(" "),a("ol",[a("li",[s._v("传统的"),a("strong",[s._v("类型转换")]),s._v("，由RTTI确保类型转换的正确性，如果执行了错误的类型转换，会抛出一个ClassCastException的异常。")]),s._v(" "),a("li",[s._v("代表对象类型的"),a("strong",[s._v("Class对象")]),s._v("，通过Class对象获取所需要的信息")]),s._v(" "),a("li",[s._v("类型转换前用"),a("strong",[s._v("instanceof")]),s._v("检查")])]),s._v(" "),a("h2",{attrs:{id:"class对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class对象"}},[s._v("#")]),s._v(" Class对象")]),s._v(" "),a("h3",{attrs:{id:"是什么-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是什么-2"}},[s._v("#")]),s._v(" 是什么")]),s._v(" "),a("p",[s._v("每个类经过编译都会生成一个.class文件，这个.class文件就是表示类信息的二进制字节码文件。运行时，虚拟机的类加载器会加载这个.class文件，生成Class对象，并将.class文件中的常量池放入方法区的运行时常量池，Class对象就代表着类型信息，并提供访问运行时常量池的途径")]),s._v(" "),a("h3",{attrs:{id:"类字面常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类字面常量"}},[s._v("#")]),s._v(" 类字面常量")]),s._v(" "),a("p",[s._v("例如："),a("code",[s._v("Class clazz = Object.class")])]),s._v(" "),a("h3",{attrs:{id:"✨class-forname-和类字面常量的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✨class-forname-和类字面常量的区别"}},[s._v("#")]),s._v(" ✨Class.forName()和类字面常量的区别")]),s._v(" "),a("ol",[a("li",[s._v("使用.class来创建Class对象的引用时，不会自动地初始化该Class对象，"),a("strong",[s._v("并且在编译器就已经做了类型检查")])]),s._v(" "),a("li",[s._v("Class.forName()创建Class对象引用时，会自动地初始化该Class对象")])]),s._v(" "),a("h4",{attrs:{id:"代码验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码验证"}},[s._v("#")]),s._v(" 代码验证")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticFinalValue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// static和final 的编译时常量")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticFinalConstant")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"StaticFinalConstant Construct"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// static和final 的非编译时常量")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticFinalVariable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"StaticFinalVariable Construct"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// static 的常量")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticVariable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"StaticVariable Construct"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticFinalConstant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticFinalVariable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticVariable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出结果: ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticFinalVariable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Construct")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mar")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("03")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("09")]),s._v(" CST "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticVariable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Construct")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),a("h4",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("如果一个static final的值是"),a("code",[s._v("编译期常量")]),s._v("，那么访问这个值就不需要对其所在的Class对象进行初始化。如"),a("code",[s._v("static final int num = 0;")])])]),s._v(" "),a("li",[a("p",[s._v("如果一个static final的值是"),a("code",[s._v("非编译期常量")]),s._v("，那么访问这个值将强制进行Class对象的初始化。如")]),s._v(" "),a("p",[a("code",[s._v("static final Date now = new Date();")])])]),s._v(" "),a("li",[a("p",[s._v("如果一个static非final的值，那么访问这个值时，需要先进行Class对象初始化。如"),a("code",[s._v("static int num = 1")])])])]),s._v(" "),a("h3",{attrs:{id:"泛型与class对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型与class对象"}},[s._v("#")]),s._v(" 泛型与Class对象")]),s._v(" "),a("p",[s._v("向Class引用添加泛型语法是为了"),a("code",[s._v("提供编译期的类型检查")]),s._v("，因此如果你操作有误，稍后立即就会发现这一点")]),s._v(" "),a("ol",[a("li",[s._v("通配符?：表示任何事物。使用Class<?>优于Class")]),s._v(" "),a("li",[s._v("通配符extends：限定Class应用为某种类型或者该类型的任何子类型。Class<? extends Number> class")])]),s._v(" "),a("h2",{attrs:{id:"反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[s._v("#")]),s._v(" 反射")]),s._v(" "),a("h3",{attrs:{id:"是什么-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是什么-3"}},[s._v("#")]),s._v(" 是什么")]),s._v(" "),a("p",[s._v("✨它是一种允许程序在"),a("code",[s._v("运行时")]),s._v("通过Reflection APIs访问任何一个已知名称的class的内部信息（包括其modifiers、 superclass、实现的 interfaces 、也包括其fields和methods的所有信息，并可于运行时改变fields内容或调用methods）的机制。")]),s._v(" "),a("h3",{attrs:{id:"动态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态代理"}},[s._v("#")]),s._v(" 动态代理")]),s._v(" "),a("p",[s._v('Java动态代理是在代理模式的基础上的升级，它可以动态的创建代理并动态的处理对所代理方法的调用。动态代理可以将所有调用（也可以过滤某些方法）重定向到代理类，因此代理类的构造器通常会传递一个"实际"对象的应用。')]),s._v(" "),a("ul",[a("li",[s._v("Proxy.newProxyInstance()")]),s._v(" "),a("li",[s._v("InvocationHandler接口")])]),s._v(" "),a("h3",{attrs:{id:"使用反射越过编译器检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用反射越过编译器检查"}},[s._v("#")]),s._v(" 使用反射越过编译器检查")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReflectionOverCheck")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" stringList "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        stringList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HelloWorld"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" stringList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),s._v(" addMethod "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"add"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 通过定义容器和添加Java泛型, 是的虚拟机在编译器间可以做类型检查,但是通过反射机制可以绕开该检查。那是因为反射运行时才会加载.class文件")]),s._v("\n        addMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stringList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stringList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出结果:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloWorld")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h2",{attrs:{id:"rtti和反射的本质区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rtti和反射的本质区别"}},[s._v("#")]),s._v(" RTTI和反射的本质区别")]),s._v(" "),a("ul",[a("li",[s._v("RTTI：编译器在编译时打开和检查.class文件，也就是可以用"),a("code",[s._v("'普通的RTTI'")]),s._v("方式调用对象的所有方法")]),s._v(" "),a("li",[s._v("反射：对于反射机制来说，.class文件在编译时是不可获取的，只有在运行时才会打开和检查.class文件")])])])}),[],!1,null,null,null);t.default=e.exports}}]);